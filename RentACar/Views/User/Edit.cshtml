@using RentACar.Data.ViewModels
@model EditUserVM

<h2>Edit User</h2>

<form asp-action="Edit" method="post" id="editForm" onsubmit="return handleSubmit(event)">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />

    <div class="form-group">
        <label asp-for="Firstname"></label>
        <input asp-for="Firstname" class="form-control" />
        <span asp-validation-for="Firstname" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Surname"></label>
        <input asp-for="Surname" class="form-control" />
        <span asp-validation-for="Surname" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="PhoneNumber"></label>
        <input asp-for="PhoneNumber" class="form-control" />
        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Email"></label>
        <input asp-for="Email" class="form-control" readonly />
    </div>

    <div class="form-group">
        <label asp-for="Role"></label>
        <select asp-for="Role" asp-items="@(ViewBag.Roles as SelectList)" class="form-control">
            <option value="">-- Select Role --</option>
        </select>
        <span asp-validation-for="Role" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary" id="submitBtn"
            onclick="return handleFormSubmit(event)">
        Save Changes
    </button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>


@section Scripts {
    <script>
        function handleFormSubmit(event) {
            event.preventDefault();
            const form = document.getElementById('editForm');
            const submitBtn = document.getElementById('submitBtn');

            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status"></span>
                Saving...
            `;

            // Create proper FormData
            const formData = new URLSearchParams();
            for (const pair of new FormData(form)) {
                formData.append(pair[0], pair[1]);
            }

            // Submit via fetch
            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                }
            })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                } else {
                    return response.text().then(html => {
                        document.documentElement.innerHTML = html;
                    });
                }
            })
            .catch(error => {
                console.error('Submission error:', error);
                submitBtn.disabled = false;
                submitBtn.textContent = 'Save Changes';
            });

            return false;
        }
    </script>
}